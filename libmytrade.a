!<arch>
myview.c/       1516436901  0     0     100766  1500      `
/******************************************
Copyright:SDUT
Author:崔辉
Date:2018-01-18
Describe:界面控件的声明、将glade与代码相链接
Mail:956622792@qq.com
******************************************/
#include <stdio.h>
#include "myview.h"
/******************************************
Function:载入glade文件
in:  
	gchar* filename：界面文件名
out:无
return:gb GtkBuilder对象
******************************************/
GtkBuilder* gtk_load_glade(gchar* filename)
{
	GtkBuilder *gb;
	gb=gtk_builder_new();
	if(!gtk_builder_add_from_file(gb,filename,NULL)) 			
		return NULL;
	gtk_builder_connect_signals(gb,NULL);
	return gb;
}
/******************************************
Function:将galde控件与代码相链接
in:  
	GtkBuilder* gb：GtkBuilder对象
out:无
return:void
******************************************/
void myview_get_widgets(GtkBuilder* gb)
{
	main_get_widgets(gb);          //主界面
	load_get_widgets(gb);          //载入界面
	help_get_widgets(gb);          //帮助界面
	login_get_widgets(gb);         //登录界面
	file_get_widgets(gb);          //文件选择界面
	wuliu_get_widgets(gb);         //物流信息界面
	change_get_widgets(gb);        //修改信息界面
	add_get_widgets(gb);           //商品上架界面
}
/******************************************
Function:显示glade页面
in: 无
out:无
return:void
******************************************/
void cal_widget_init()
{
	gtk_widget_show(GTK_WIDGET(window_login));
}

window_add.c/   1516437753  0     0     100766  1103      `
/******************************************
Copyright:SDUT
Author:李晓龙
Date:2018-01-18
Describe:商品上架界面的声明
Mail:956622792@qq.com
******************************************/
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <gtk/gtk.h>
#include "window_add.h"
#define BUFSIZE 1024
/******************************************
Function:将上架界面galde控件与代码相链接
in:  
	gchar* filename界面文件名
out:无
return:void
******************************************/
void add_get_widgets(GtkBuilder* gb)
{
	w_(gb,WINDOW,window1_add);	
	w_(gb,WINDOW,window2_add);
	w_(gb,WINDOW,window3_add);
	w_(gb,BUTTON,button_sure_add);
	w_(gb,BUTTON,button_cancel_add);
	w_(gb,BUTTON,button_return_add);
	w_(gb,BUTTON,button_change_add);
	w_(gb,BUTTON,button_nchange_add);
	w_(gb,ENTRY,entry_address_add);
	w_(gb,ENTRY,entry_rest_add);
	w_(gb,ENTRY,entry_price_add);
	w_(gb,ENTRY,entry_sign_add);
	w_(gb,ENTRY,entry_material_add);
	w_(gb,ENTRY,entry_shape_add);
	w_(gb,ENTRY,entry_color_add);
	w_(gb,ENTRY,entry_describe_add);
	w_(gb,ENTRY,entry_name_add);
}





window_change.c/1516437829  0     0     100766  1018      `
/******************************************
Copyright:SDUT
Author:王姗姗
Date:2018-01-18
Describe:修改信息显示界面
Mail:956622792@qq.com
******************************************/
#include "window_change.h"
/******************************************
Function:将修改信息界面galde控件与代码相链接
in:  
	gchar* filename界面文件名
out:无
return:void
******************************************/
void change_get_widgets(GtkBuilder* gb)
{
	w_(gb,WINDOW,window_change);
	w_(gb,WINDOW,window1_change);
	w_(gb,WINDOW,window2_change);
	w_(gb,BUTTON,button_change_sure);
	w_(gb,BUTTON,button_change_close);
	w_(gb,BUTTON,button1_change_close);
	w_(gb,BUTTON,button2_change_close);
	w_(gb,ENTRY,entry_name_change);
	w_(gb,ENTRY,entry_color_change);
	w_(gb,ENTRY,entry_singal_change);
	w_(gb,ENTRY,entry_body_change);
	w_(gb,ENTRY,entry_rest_change);
	w_(gb,ENTRY,entry_material_change);
	w_(gb,ENTRY,entry_price_change);
	w_(gb,ENTRY,entry_address_change);
	w_(gb,ENTRY,entry_fountion_change);
}
window_file.c/  1516438237  0     0     100766  779       `
/******************************************
Copyright:SDUT
Author:崔辉
Date:2018-01-18
Describe:文件读取显示界面
Mail:956622792@qq.com
******************************************/
#include <gtk/gtk.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "window_file.h"

#define w_(builder,type,name) name=GTK_##type(gtk_builder_get_object(builder,#name))

/******************************************
Function:将文件读物界面galde控件与代码相链接
in:  
	gchar* filename界面文件名
out:无
return:void
******************************************/
void file_get_widgets(GtkBuilder* gb)
{
	w_(gb,WINDOW,window_file);	
	w_(gb,BUTTON, button_file_sure);				
	w_(gb,BUTTON, button_file_cancel);
	w_(gb,FILE_CHOOSER, filechooser_window);
}






window_help.c/  1516439867  0     0     100766  619       `
/******************************************
Copyright:SDUT
Author:许荣耀
Date:2018-01-18
Describe:帮助显示界面
Mail:956622792@qq.com
******************************************/
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "window_help.h"

/******************************************
Function:将帮助界面galde控件与代码相链接
in:  
	gchar* filename界面文件名
out:无
return:void
******************************************/
void help_get_widgets(GtkBuilder* gb)
{
	w_(gb,WINDOW,window_help);	
	w_(gb,BUTTON, button_help_back);				
	w_(gb,TEXT_VIEW, textview_help);
}






window_load.c/  1516438641  0     0     100766  823       `
/******************************************
Copyright:SDUT
Author:崔辉
Date:2018-01-18
Describe:载入界面声明
Mail:956622792@qq.com
******************************************/
#include <gtk/gtk.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "window_load.h"

#define w_(builder,type,name) name=GTK_##type(gtk_builder_get_object(builder,#name))

/******************************************
Function:载入界面galde控件与代码相链接
in:  
	gchar* filename界面文件名
out:无
return:void
******************************************/
void load_get_widgets(GtkBuilder* gb)
{
	w_(gb,WINDOW,window_load);	
	w_(gb,ENTRY,entry_load_show);
	w_(gb,BUTTON, button_load_sure);				
	w_(gb,BUTTON, button_load_cancel);
	w_(gb,COMBO_BOX, combobox_load);
	w_(gb,BUTTON, button_file_choose);
}






window_login.c/ 1516439892  0     0     100766  747       `
/******************************************
Copyright:SDUT
Author:孙昊
Date:2018-01-18
Describe:登录显示界面
Mail:956622792@qq.com
******************************************/
#include <gtk/gtk.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "window_login.h"
/******************************************
Function:将登录界面galde控件与代码相链接
in:  
	gchar* filename界面文件名
out:无
return:void
******************************************/
void login_get_widgets(GtkBuilder* gb)
{
	w_(gb,WINDOW,window_login);	
	w_(gb,ENTRY,entry_id);
	w_(gb,ENTRY,entry_password);
	w_(gb,BUTTON, button_login);				
	w_(gb,BUTTON, button_login_cancel);
	w_(gb,WINDOW,window2_login);
	w_(gb,BUTTON, button_back);

}

window_main.c/  1516453198  0     0     100766  2756      `
/******************************************
Copyright:SDUT
Author:崔辉
Date:2018-01-18
Describe:显示主界面
Mail:956622792@qq.com
******************************************/
#include <gtk/gtk.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "window_main.h"


/******************************************
Function:初始化树视图
in:  
	GtkWidget * list树视图的列表对象
out:无
return:void
******************************************/
void init_list(GtkWidget * list) 
{
	GtkCellRenderer *rend;
	GtkTreeViewColumn *col;
	rend=gtk_cell_renderer_text_new();
	//给树视图设置表头
	col=gtk_tree_view_column_new_with_attributes("商品名称",rend,"text",0,NULL);
	gtk_tree_view_append_column(GTK_TREE_VIEW(list), col);
	col=gtk_tree_view_column_new_with_attributes("卖家地点",rend,"text",1,NULL);
	gtk_tree_view_append_column(GTK_TREE_VIEW(list), col);
	col=gtk_tree_view_column_new_with_attributes("存货",rend,"text",2,NULL);
	gtk_tree_view_append_column(GTK_TREE_VIEW(list), col);
    col=gtk_tree_view_column_new_with_attributes("价格",rend,"text",3,NULL);
	gtk_tree_view_append_column(GTK_TREE_VIEW(list), col);
	col=gtk_tree_view_column_new_with_attributes("品牌",rend,"text",4,NULL);
	gtk_tree_view_append_column(GTK_TREE_VIEW(list), col);
	col=gtk_tree_view_column_new_with_attributes("材质",rend,"text",5,NULL);
	gtk_tree_view_append_column(GTK_TREE_VIEW(list), col);
	col=gtk_tree_view_column_new_with_attributes("形状",rend,"text",6,NULL);
	gtk_tree_view_append_column(GTK_TREE_VIEW(list), col);
	col=gtk_tree_view_column_new_with_attributes("颜色",rend,"text",7,NULL);
	gtk_tree_view_append_column(GTK_TREE_VIEW(list), col);
	col=gtk_tree_view_column_new_with_attributes("功能关键字",rend,"text",8,NULL);
	gtk_tree_view_append_column(GTK_TREE_VIEW(list), col);
}
/******************************************
Function:将主界面galde控件与代码相链接
in:  
	gchar* filename界面文件名
out:无
return:void
******************************************/
void main_get_widgets(GtkBuilder* gb)
{
	w_(gb,WINDOW,window_main);	
	w_(gb,ENTRY,entry_search);
	w_(gb,TREE_VIEW,treeview_goods);
	w_(gb,LIST_STORE,liststore_select);
	w_(gb,LIST_STORE,liststore_goods);
	w_(gb,BUTTON, button_search);				
	w_(gb,BUTTON, button_load);
	w_(gb,BUTTON, button_sort);
	w_(gb,BUTTON, button_change);
	w_(gb,BUTTON, button_wuliu);
	w_(gb,BUTTON, button_help);
	w_(gb,BUTTON, button_decrease);
	w_(gb,BUTTON, button_add);
	w_(gb,BUTTON, button_next);
	w_(gb,BUTTON, button_pre);
	w_(gb,BUTTON, button_pre_sort);
	w_(gb,BUTTON, button_pre_search);
	w_(gb,BUTTON, button_next_sort);
	w_(gb,BUTTON, button_next_search);
	w_(gb,COMBO_BOX, combox_select);
	w_(gb,SCROLLED_WINDOW, scrolledwindow);
}





window_wuliu.c/ 1516440056  0     0     100766  1072      `
/******************************************
Copyright:SDUT
Author:王姗姗
Date:2018-01-18
Describe:物流信息显示主界面
Mail:
******************************************/
#include <gtk/gtk.h>
#include "window_wuliu.h"
//----- 根据GtkBuilder对象，获得glade中对应的计算器中的控件------

/******************************************
Function:物流信息界面galde控件与代码相链接
in:  
	gchar* filename界面文件名
out:无
return:void
******************************************/
void wuliu_get_widgets(GtkBuilder* gb)
{
	w_(gb, WINDOW, window_wuliu);
	w_(gb, WINDOW, window1_wuliu);
	w_(gb, WINDOW, window2_wuliu);
	w_(gb, WINDOW, window3_wuliu);
	w_(gb, BUTTON, button_wuliu_cancel);
	w_(gb, BUTTON, button_wuliu_sure);
	w_(gb, BUTTON, button1_wuliu_close);
	w_(gb, BUTTON, button2_wuliu_close);
	w_(gb, BUTTON, button3_wuliu_close);
	w_(gb, ENTRY, entry_short);
	w_(gb, ENTRY, entry_short_time);
	w_(gb, ENTRY, entry_cheap);
	w_(gb, ENTRY, entry_cheap_cost);
	w_(gb, COMBO_BOX, combobox1_wuliu);
	w_(gb, COMBO_BOX, combobox2_wuliu);
}
addcont.c/      1516440652  0     0     100766  3131      `
/******************************************
Copyright:SDUT
Author:李晓龙
Date:2018-01-18
Describe:上架界面回调函数
Mail:956622792@qq.com
******************************************/
#include <stdlib.h>
#include <string.h>
#include "addcont.h"
#include "myview.h"
#include "linklist.h"

/******************************************
Function:确认添加按钮回调函数
out:无
return:void
******************************************/
void on_button_sure_add_clicked(GtkObject* widget,gpointer user_data)
{
	const gchar* str1 = gtk_entry_get_text(entry_name_add);
	const gchar* str2 = gtk_entry_get_text(entry_address_add);
	const gchar* str3 = gtk_entry_get_text(entry_rest_add);
	const gchar* str4 = gtk_entry_get_text(entry_price_add);
	const gchar* str5 = gtk_entry_get_text(entry_sign_add);
	const gchar* str6 = gtk_entry_get_text(entry_material_add);
	const gchar* str7 = gtk_entry_get_text(entry_shape_add);
	const gchar* str8 = gtk_entry_get_text(entry_color_add);
	const gchar* str9 = gtk_entry_get_text(entry_describe_add);

	    if(strcmp(str9,"")==0||strcmp(str8,"")==0||strcmp(str7,"")==0||strcmp(str6,"")==0||strcmp(str5,"")==0||strcmp(str4,"")==0||strcmp(str3,"")==0||strcmp(str2,"")==0||strcmp(str1,"")==0)
	    {
			//gtk_widget_hide(GTK_WIDGET(window1_add));
	        gtk_widget_show(GTK_WIDGET(window2_add));
        }
	    else
	    {
			GtkTreeIter iter;
			gtk_list_store_append(liststore_goods,&iter);
			gtk_list_store_set(liststore_goods,&iter,0,str1,-1);
			gtk_list_store_set(liststore_goods,&iter,1,str2,-1);
			gtk_list_store_set(liststore_goods,&iter,2,str3,-1);
			gtk_list_store_set(liststore_goods,&iter,3,str4,-1);
			gtk_list_store_set(liststore_goods,&iter,4,str5,-1);
			gtk_list_store_set(liststore_goods,&iter,5,str6,-1);
			gtk_list_store_set(liststore_goods,&iter,6,str7,-1);
			gtk_list_store_set(liststore_goods,&iter,7,str8,-1);
			gtk_list_store_set(liststore_goods,&iter,8,str9,-1);
			link p;
			p = (link)malloc(sizeof(struct node));
			strcpy(p->obj.name, str1);
			strcpy(p->obj.city, str2);
			strcpy(p->obj.pinpai, str5);
			strcpy(p->obj.shape, str7);
			strcpy(p->obj.caizhi, str6);
			strcpy(p->obj.color, str8);
			strcpy(p->obj.use, str9);
			p->next = NULL;
			p->pre = listtail;
			listtail->next = p;
			listtail = p;
			gtk_widget_hide(GTK_WIDGET(window1_add));
	    }
}

//-----------上架取消-----------//
void on_button_cancel_add_clicked(GtkObject* widget,gpointer user_data)
{
	gtk_widget_hide(GTK_WIDGET(window1_add));
}
//-----------信息不完整返回---------//
void on_button_return_add_clicked(GtkObject* widget,gpointer user_data)
{
	gtk_widget_hide(GTK_WIDGET(window2_add));
	gtk_widget_show(GTK_WIDGET(window1_add));
}
//-----------重名确认修改--------
void on_button_change_add_clicked(GtkObject* widget,gpointer user_data)
{
	//change(str);
	gtk_widget_hide(GTK_WIDGET(window3_add));
	gtk_widget_show(GTK_WIDGET(window1_add));
}
//-----------重名取消修改--------//
void on_button_nchange_add_clicked(GtkObject* widget,gpointer user_data)
{
	gtk_widget_hide(GTK_WIDGET(window3_add));
	gtk_widget_show(GTK_WIDGET(window1_add));
}

changecont.c/   1516442277  0     0     100766  4318      `
/******************************************
Copyright:SDUT
Author:王姗姗
Date:2018-01-18
Describe:修改信息界面
Mail:956622792@qq.com
******************************************/
#include <gtk/gtk.h>
#include "myview.h"
#include "mycontrol.h"
#include "changecont.h"


/******************************************
Function:树视图信息选中回调函数
out:无
return:void
******************************************/
void on_treeview_goods_cursor_changed(GtkObject* widget,gpointer user_data)
{
	GValue value[9]             = {0};
	GtkTreeIter iter            = {0}; 
   	GtkTreeStore* store         = NULL;
	GtkTreeSelection* selection = NULL;	 
	selection = gtk_tree_view_get_selection(treeview_goods);
	gtk_tree_selection_get_selected(selection, (GtkTreeModel**)&store, &iter);
	//获取每一列信息，然后显示到录入框
	const gchar *str;
	gtk_tree_model_get_value(GTK_TREE_MODEL(store), &iter, 0, &value[0]);
	str = g_value_get_string(&value[0]);
	gtk_entry_set_text(entry_name_change,str);
	gtk_tree_model_get_value(GTK_TREE_MODEL(store), &iter, 1, &value[1]);
	str = g_value_get_string(&value[1]);
	gtk_entry_set_text(entry_address_change,str);
	gtk_tree_model_get_value(GTK_TREE_MODEL(store), &iter, 2, &value[2]);
	str = g_value_get_string(&value[2]);
	gtk_entry_set_text(entry_rest_change,str);
	gtk_tree_model_get_value(GTK_TREE_MODEL(store), &iter, 3, &value[3]);
	str = g_value_get_string(&value[3]);
	gtk_entry_set_text(entry_price_change,str);
	gtk_tree_model_get_value(GTK_TREE_MODEL(store), &iter, 4, &value[4]);
	str = g_value_get_string(&value[4]);
	gtk_entry_set_text(entry_singal_change,str);
	gtk_tree_model_get_value(GTK_TREE_MODEL(store), &iter, 5, &value[5]);
	str = g_value_get_string(&value[5]);
	gtk_entry_set_text(entry_material_change,str);
	gtk_tree_model_get_value(GTK_TREE_MODEL(store), &iter, 6, &value[6]);
	str = g_value_get_string(&value[6]);
	gtk_entry_set_text(entry_body_change,str);
	gtk_tree_model_get_value(GTK_TREE_MODEL(store), &iter, 7, &value[7]);
	str = g_value_get_string(&value[7]);
	gtk_entry_set_text(entry_color_change,str);
	gtk_tree_model_get_value(GTK_TREE_MODEL(store), &iter, 8, &value[8]);
	str = g_value_get_string(&value[8]);
	gtk_entry_set_text(entry_fountion_change,str);
}

/******************************************
Function:确认修改按钮回调函数
out:无
return:void
******************************************/
void on_button_change_sure_clicked(GtkObject* widget,gpointer user_data)
{
	//将录入框中的内容替换选择的信息
	GtkTreeIter iter            = {0}; 
   	GtkTreeStore* store         = NULL;
	GtkTreeSelection* selection = NULL;	 
	selection = gtk_tree_view_get_selection(treeview_goods);
	gtk_tree_selection_get_selected(selection, (GtkTreeModel**)&store, &iter);
	//将修改后的信息重新录入到树视图当中
	gtk_list_store_set(liststore_goods, &iter, 0, gtk_entry_get_text(entry_name_change), -1);
	gtk_list_store_set(liststore_goods, &iter, 1, gtk_entry_get_text(entry_address_change), -1);
	gtk_list_store_set(liststore_goods, &iter, 2, gtk_entry_get_text(entry_rest_change), -1);
	gtk_list_store_set(liststore_goods, &iter, 3, gtk_entry_get_text(entry_price_change), -1);
	gtk_list_store_set(liststore_goods, &iter, 4, gtk_entry_get_text(entry_singal_change), -1);
	gtk_list_store_set(liststore_goods, &iter, 5, gtk_entry_get_text(entry_material_change), -1);
	gtk_list_store_set(liststore_goods, &iter, 6, gtk_entry_get_text(entry_body_change), -1);
	gtk_list_store_set(liststore_goods, &iter, 7, gtk_entry_get_text(entry_color_change), -1);
	gtk_list_store_set(liststore_goods, &iter, 8, gtk_entry_get_text(entry_fountion_change), -1);
	gtk_widget_show(GTK_WIDGET(window1_change));
}
/******************************************
Function:取消修改按钮回调函数
out:无
return:void
******************************************/
void on_button_change_close_clicked(GtkObject* widget,gpointer user_data)
{
	gtk_widget_hide(GTK_WIDGET(window_change));
}
/******************************************
Function:退出提示信息界面按钮回调函数
out:无
return:void
******************************************/
void on_button1_change_close_clicked(GtkObject* widget,gpointer user_data)
{
	gtk_widget_hide(GTK_WIDGET(window1_change));
	gtk_widget_hide(GTK_WIDGET(window_change));
}

filecont.c/     1516442475  0     0     100766  883       `
/******************************************
Copyright:SDUT
Author:崔辉
Date:2018-01-18
Describe:文件选择界面
Mail:956622792@qq.com
******************************************/
#include <gtk/gtk.h>

#include "filecont.h"
#include "myview.h"


/******************************************
Function:取消按钮回调函数
out:无
return:void
******************************************/
void on_button_file_cancel_clicked(GtkObject* widget,gpointer user_date)
{
	gtk_widget_hide(GTK_WIDGET(window_file));
}

/******************************************
Function:确认按钮回调函数
out:无
return:void
******************************************/
void on_button_file_sure_clicked(GtkObject* widget,gpointer user_date)
{
	const gchar *s = gtk_file_chooser_get_filename(filechooser_window);
	gtk_entry_set_text(entry_load_show, s);
	gtk_widget_hide(GTK_WIDGET(window_file));
}


helpcont.c/     1516442521  0     0     100766  522       `
/******************************************
Copyright:SDUT
Author:许荣耀
Date:2018-01-18
Describe:帮助界面回调函数
Mail:956622792@qq.com
******************************************/
#include <gtk/gtk.h>

#include "helpcont.h"
#include "myview.h"

/******************************************
Function：返回按钮回调函数
out:无
return:void
******************************************/
void on_button_help_cancel_clicked(GtkObject* widget,gpointer user_date)
{
	gtk_widget_hide(GTK_WIDGET(window_help));
}

loadcont.c/     1516448774  0     0     100766  4898      `
/******************************************
Copyright:SDUT
Author:崔辉
Date:2018-01-18
Describe:信息载入界面
Mail:956622792@qq.com
******************************************/
#include <gtk/gtk.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include "loadcont.h"
#include "myview.h"
#include "linklist.h"
#include "hash.h"

/******************************************
Function:文件选择按钮回调函数
out:无
return:void
******************************************/
void on_button_file_choose_clicked(GtkObject* widget,gpointer user_date)
{
	gtk_widget_show(GTK_WIDGET(window_file));
}

/******************************************
Function:取消载入按钮回调函数
out:无
return:void
******************************************/
void on_button_load_cancel_clicked(GtkObject* widget,gpointer user_date)
{
	gtk_widget_hide(GTK_WIDGET(window_load));
}


/******************************************
Function:确认载入按钮回调函数
out:无
return:void
******************************************/
void on_button_load_sure_clicked(GtkObject* widget,gpointer user_date)
{
	clock_t begin, end;
	int j = 0;
	double runtime;
	const gchar* str;
	char name[30], address[20], pinpai[20], caizhi[20], shape[20], color[10], use[30];
	char str_restnum[10], str_price[10];
	int restnum, price;
	if(!gtk_combo_box_get_active_text(combobox_load))
	{
		//gtk_widget_show(GTK_WIDGET(window_file));
		return ;		
	}
	str = gtk_combo_box_get_active_text(combobox_load);
	if(strcmp(str, "库存信息载入") == 0)
	{
		const gchar *keys = gtk_entry_get_text(entry_load_show);
		FILE *fp = fopen(keys, "r+");
		GtkTreeIter iter;
		link tail;
		head = initLink();
		listhead = head;
		tail = head;
		struct info obj={};
		gtk_list_store_clear(liststore_goods);
		begin = clock();
		
		while(fscanf(fp, "%[^;];%[^;];%d;%d;%[^;];%[^;];%[^;];%[^;];%s\n", obj.name, obj.city, &obj.restnum, &obj.price, obj.pinpai, obj.caizhi, obj.shape, obj.color, obj.use) != EOF)
		{
			
			//printf("%s-%s-%d-%d-%s-%s-%s-%s-%s\n", obj.name, obj.city, obj.restnum, obj.price, obj.pinpai, obj.caizhi, obj.shape, obj.color, obj.use);
			tail = createLink(tail, obj);
			sprintf(str_restnum, "%d", obj.restnum);
			sprintf(str_price, "%d", obj.price);
			if(j < 14)
			{
				gtk_list_store_append(liststore_goods, &iter);
				gtk_list_store_set(liststore_goods, &iter, 0, obj.name, -1);
				gtk_list_store_set(liststore_goods, &iter, 1, obj.city, -1);
				gtk_list_store_set(liststore_goods, &iter, 2, str_restnum, -1);
				gtk_list_store_set(liststore_goods, &iter, 3, str_price, -1);
				gtk_list_store_set(liststore_goods, &iter, 4, obj.pinpai, -1);
				gtk_list_store_set(liststore_goods, &iter, 5, obj.caizhi, -1);
				gtk_list_store_set(liststore_goods, &iter, 6, obj.shape, -1);
				gtk_list_store_set(liststore_goods, &iter, 7, obj.color, -1);
				gtk_list_store_set(liststore_goods, &iter, 8, obj.use, -1);
				listhead = listhead->next;
				j++;
			}
		}
		listtail = tail;
		end = clock();
		runtime = end-begin;
		runtime /= CLOCKS_PER_SEC;
		printf("载入并加载到树视图中的运行时间为%lfs\n", runtime);
		fclose(fp);
	}
	else if(strcmp(str, "批量信息载入") == 0)
	{
		const gchar *keys = gtk_entry_get_text(entry_load_show);
		FILE *fp = fopen(keys, "r+");
		GtkTreeIter iter;
		link tail;
		tail = listtail;
		struct info obj;
		
		begin = clock();
		while(fscanf(fp, "%[^;];%[^;];%d;%d;%[^;];%[^;];%[^;];%[^;];%s%*c", obj.name, obj.city, &obj.restnum, &obj.price, obj.pinpai, obj.caizhi, obj.shape, obj.color, obj.use) != EOF)
		{
			tail = createLink(tail, obj);
			//printf("%s-%s-%d-%d-%s-%s-%s-%s-%s\n", obj.name, obj.city, obj.restnum, obj.price, obj.pinpai, obj.caizhi, obj.shape, obj.color, obj.use);
			sprintf(str_restnum, "%d", obj.restnum);
			sprintf(str_price, "%d", obj.price);
			gtk_list_store_append (liststore_goods, &iter);
			gtk_list_store_set(liststore_goods, &iter, 0, obj.name, -1);
			gtk_list_store_set(liststore_goods, &iter, 1, obj.city, -1);
			gtk_list_store_set(liststore_goods, &iter, 2, str_restnum, -1);
			gtk_list_store_set(liststore_goods, &iter, 3, str_price, -1);
			gtk_list_store_set(liststore_goods, &iter, 4, obj.pinpai, -1);
			gtk_list_store_set(liststore_goods, &iter, 5, obj.caizhi, -1);
			gtk_list_store_set(liststore_goods, &iter, 6, obj.shape, -1);
			gtk_list_store_set(liststore_goods, &iter, 7, obj.color, -1);
			gtk_list_store_set(liststore_goods, &iter, 8, obj.use, -1);
		}
		listtail = tail;
		end = clock();
		runtime = end-begin;
		runtime /= CLOCKS_PER_SEC;
		printf("载入并加载到树视图中的运行时间为%lfs\n", runtime);
		fclose(fp);
	}
	/**/
	gtk_widget_hide(GTK_WIDGET(window_load));
	link p;
	p = head->next;
	inithead();
	while(p)
	{
		create_city_list(p->obj);
		create_color_list(p->obj);
		create_caizhi_list(p->obj);
		create_pinpai_list(p->obj);
		p = p->next;
	}
}
logincont.c/    1516442808  0     0     100766  1477      `
/******************************************
Copyright:SDUT
Author:孙昊
Date:2018-01-18
Describe:登录界面
Mail:956622792@qq.com
******************************************/
#include <gtk/gtk.h>

#include "logincont.h"
#include "myview.h"

/******************************************
Function:确认登录按钮回调函数
out:无
return:void
******************************************/
void on_button_login_clicked(GtkObject* widget,gpointer user_data)
{
	char user[] = "root";
	char password[] = "******";
	const gchar* str;
	str = gtk_entry_get_text(entry_id);
    const gchar* str1;
    str1 = gtk_entry_get_text(entry_password);
    if(strcmp(str,user)==0&&strcmp(str1,password)==0)
    {
        gtk_widget_hide(GTK_WIDGET(window_login));
        gtk_widget_show(GTK_WIDGET(window_main));
        init_list(GTK_WIDGET(treeview_goods));
    }
    else 
    {
        gtk_widget_show(GTK_WIDGET(window2_login));
    }
        
}
/******************************************
Function:退出提示界面按钮回调函数
out:无
return:void
******************************************/
void on_button_back_clicked(GtkObject* widget,gpointer user_data)
{
	gtk_widget_hide(GTK_WIDGET(window2_login));
}
/******************************************
Function:取消登录按钮回调函数
out:无
return:void
******************************************/
void on_button_login_cancel_clicked(GtkObject* widget,gpointer user_data)
{
	gtk_widget_hide(GTK_WIDGET(window_login));
}


maincont.c/     1516455517  0     0     100766  15169     `
/******************************************
Copyright:SDUT
Author:崔辉
Date:2018-01-18
Describe:主界面回调函数
Mail:956622792@qq.com
******************************************/
#include <gtk/gtk.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include "myview.h"
#include "mycontrol.h"
#include "hash.h"
#include "linklist.h"
#include "sort.h"
#include "del.h"

link p_sort;    //排序的头指针
link p_search;   //查询的头指针
int page = 1, page1 = 1, page2 = 1;   //记录页码
int select_flag;   //记录查询哪个关键字
clock_t begin, end;   //用来计时的变量
double runtime;
/******************************************
Function:搜索按钮回调函数
out:无
return:void
******************************************/
void on_button_search_clicked(GtkObject* widget,gpointer user_date)
{
	char* str;
	const gchar *str1;
	int flag;
	//link p;
	char str_restnum[20], str_price[20];
	if(!gtk_combo_box_get_active_text(combox_select))
	{
		gtk_entry_set_text(entry_search,"请选择内容！");
		return ;		
	}
	str = gtk_combo_box_get_active_text(combox_select);
	str1 = gtk_entry_get_text(entry_search);
	//建立不同元素的存储链表
	begin = clock();
	if(strcmp(str,"地点") == 0)
	{
		flag = wuliu_change1(str1);
		p_search = city_head[flag]->next;
		select_flag = 1;
	}
	else if(strcmp(str, "品牌") == 0)
	{
		flag = pinpai_change(str1);
		p_search = pinpai_head[flag]->next;
		select_flag = 2;
	}
	else if(strcmp(str, "颜色") == 0)
	{
		flag = color_change(str1);
		p_search = color_head[flag]->next;
		select_flag = 3;
	}
	else if(strcmp(str, "材质") == 0)
	{
		flag = caizhi_change(str1);
		p_search = caizhi_head[flag]->next;
		select_flag = 4;
	}
	gtk_list_store_clear(liststore_goods);
	int j = 0;
	while(p_search && j < 14)//将储存在链表中的信息输出到树视图中
	{
		GtkTreeIter iter;
		sprintf(str_restnum, "%d", p_search->obj.restnum);//将库存转化为字符串
		sprintf(str_price, "%d", p_search->obj.price);//将价格转化为字符串
		gtk_list_store_append(liststore_goods, &iter);
		gtk_list_store_set(liststore_goods, &iter, 0, p_search->obj.name, -1);
		gtk_list_store_set(liststore_goods, &iter, 1, p_search->obj.city, -1);
		gtk_list_store_set(liststore_goods, &iter, 2, str_restnum, -1);
		gtk_list_store_set(liststore_goods, &iter, 3, str_price, -1);
		gtk_list_store_set(liststore_goods, &iter, 4, p_search->obj.pinpai, -1);
		gtk_list_store_set(liststore_goods, &iter, 5, p_search->obj.caizhi, -1);
		gtk_list_store_set(liststore_goods, &iter, 6, p_search->obj.shape, -1);
		gtk_list_store_set(liststore_goods, &iter, 7, p_search->obj.color, -1);
		gtk_list_store_set(liststore_goods, &iter, 8, p_search->obj.use, -1);
		p_search = p_search->next;
		j++;
	}
	end = clock();
	runtime = end-begin;
	runtime /= CLOCKS_PER_SEC;
	printf("搜索用的时间为%lfs\n", runtime);
	if(strcmp(str,"地点") == 0)//建立不同元素的哈希链表
	{
		flag = wuliu_change1(str1);
		p_sort = sortList(city_head[flag]);
	}
	else if(strcmp(str, "品牌") == 0)
	{
		flag = pinpai_change(str1);
		p_sort = sortList(pinpai_head[flag]);
	}
	else if(strcmp(str, "颜色") == 0)
	{
		flag = color_change(str1);
		p_sort = sortList(color_head[flag]);
	}
	else if(strcmp(str, "材质") == 0)
	{
		flag = caizhi_change(str1);
		p_sort = sortList(caizhi_head[flag]);
	}
	
}
/******************************************
Function：载入按钮回调函数
out:无
return:void
******************************************/
void on_button_load_clicked(GtkObject* widget,gpointer user_date)
{
	gtk_widget_show(GTK_WIDGET(window_load));
}
/******************************************
Function:修改按钮回调函数
out:无
return:void
******************************************/
void on_button_change_clicked(GtkObject* widget,gpointer user_date)
{
	GtkTreeIter iter = {0};
	GtkTreeStore *store = NULL;
	GtkTreeSelection *selection = NULL;
	selection = gtk_tree_view_get_selection(treeview_goods);
    if(!gtk_tree_selection_get_selected(selection, (GtkTreeModel**)&store, &iter))
	{
		gtk_widget_show(GTK_WIDGET(window2_change));
		return;
	}
	gtk_widget_show(GTK_WIDGET(window_change));
}
/******************************************
Function:排序按钮回调函数
out:无
return:void
******************************************/
void on_button_sort_clicked(GtkObject* widget,gpointer user_date)
{
	char str_restnum[20], str_price[20];
	gtk_list_store_clear(liststore_goods);
	int j = 0;
	begin = clock();
	while(p_sort->next && j < 14)//将排序后的数据输出
	{
		GtkTreeIter iter;
		sprintf(str_restnum, "%d", p_sort->obj.restnum);
		sprintf(str_price, "%d", p_sort->obj.price);
		gtk_list_store_append(liststore_goods, &iter);
		gtk_list_store_set(liststore_goods, &iter, 0, p_sort->obj.name, -1);
		gtk_list_store_set(liststore_goods, &iter, 1, p_sort->obj.city, -1);
		gtk_list_store_set(liststore_goods, &iter, 2, str_restnum, -1);
		gtk_list_store_set(liststore_goods, &iter, 3, str_price, -1);
		gtk_list_store_set(liststore_goods, &iter, 4, p_sort->obj.pinpai, -1);
		gtk_list_store_set(liststore_goods, &iter, 5, p_sort->obj.caizhi, -1);
		gtk_list_store_set(liststore_goods, &iter, 6, p_sort->obj.shape, -1);
		gtk_list_store_set(liststore_goods, &iter, 7, p_sort->obj.color, -1);
		gtk_list_store_set(liststore_goods, &iter, 8, p_sort->obj.use, -1);
		p_sort = p_sort->next;
		j++;
	}
	end = clock();
	runtime = end-begin;
	runtime /= CLOCKS_PER_SEC;
	printf("排序用的时间为%lfs\n", runtime);
}
/******************************************
Function:物流信息按钮回调函数
out:无
return:void
******************************************/
void on_button_wuliu_clicked(GtkObject* widget,gpointer user_date)
{
	gtk_widget_show(GTK_WIDGET(window_wuliu));
}
/******************************************
Function:确认添加按钮回调函数
out:无
return:void
******************************************/
void on_button_add_clicked(GtkObject* widget,gpointer user_date)
{
	gtk_widget_show(GTK_WIDGET(window1_add));
}
/******************************************
Function:商品下架按钮回调函数
out:无
return:void
******************************************/
void on_button_decrease_clicked(GtkObject* widget,gpointer user_date)
{
	//首先查看是否有信息被选中
    GtkTreeIter iter            = {0}; 
    GValue value[9]             = {0};  
   	GtkTreeStore* store         = NULL;
	GtkTreeSelection* selection = NULL;	 
	selection = gtk_tree_view_get_selection(treeview_goods);//从视图中得到选择的信息
	if(!gtk_tree_selection_get_selected(selection, (GtkTreeModel**)&store, &iter)) 
	{
		return;
	}
	selection = gtk_tree_view_get_selection(treeview_goods);
	gtk_tree_selection_get_selected(selection, (GtkTreeModel**)&store, &iter);
	const gchar *str1, *str2, *str3, *str4, *str5;
	//从树视图中得到要删除的商品信息
	//将其从储存链表中删除
	gtk_tree_model_get_value(GTK_TREE_MODEL(store), &iter, 0, &value[0]);
	str1 = g_value_get_string(&value[0]);
	gtk_tree_model_get_value(GTK_TREE_MODEL(store), &iter, 1, &value[1]);
	str2 = g_value_get_string(&value[1]);
	gtk_tree_model_get_value(GTK_TREE_MODEL(store), &iter, 4, &value[4]);
	str3 = g_value_get_string(&value[4]);
	gtk_tree_model_get_value(GTK_TREE_MODEL(store), &iter, 5, &value[5]);
	str4 = g_value_get_string(&value[5]);
	gtk_tree_model_get_value(GTK_TREE_MODEL(store), &iter, 7, &value[7]);
	str5 = g_value_get_string(&value[7]);
	delete(city_head, str1, wuliu_change1(str2));
	delete(pinpai_head, str1, pinpai_change(str3));
	delete(caizhi_head, str1, caizhi_change(str4));
	delete(color_head, str1, color_change(str5));
}
/******************************************
Function:帮助按钮响应函数
out:无
return:void
******************************************/
void on_button_help_clicked(GtkObject* widget,gpointer user_date)
{
	gtk_widget_show(GTK_WIDGET(window_help));
}
/******************************************
Function:错误信息提示界面关闭按钮响应函数
out:无
return:void
******************************************/
void on_button2_change_close_clicked(GtkObject* widget,gpointer user_data)
{
	gtk_widget_hide(GTK_WIDGET(window2_change));
}
void on_button_next_clicked(GtkObject* widget,gpointer user_date)
{
		page++;
		GtkTreeIter iter;
		gtk_list_store_clear(liststore_goods);
		int j = 0;
		char str_restnum[50], str_price[50];
		while(j < 14 && listhead)
		{
			sprintf(str_restnum, "%d", listhead->obj.restnum);
			sprintf(str_price, "%d", listhead->obj.price);
			gtk_list_store_append(liststore_goods, &iter);
			gtk_list_store_set(liststore_goods, &iter, 0, listhead->obj.name, -1);
			gtk_list_store_set(liststore_goods, &iter, 1, listhead->obj.city, -1);
			gtk_list_store_set(liststore_goods, &iter, 2, str_restnum, -1);
			gtk_list_store_set(liststore_goods, &iter, 3, str_price, -1);
			gtk_list_store_set(liststore_goods, &iter, 4, listhead->obj.pinpai, -1);
			gtk_list_store_set(liststore_goods, &iter, 5, listhead->obj.caizhi, -1);
			gtk_list_store_set(liststore_goods, &iter, 6, listhead->obj.shape, -1);
			gtk_list_store_set(liststore_goods, &iter, 7, listhead->obj.color, -1);
			gtk_list_store_set(liststore_goods, &iter, 8, listhead->obj.use, -1);
			listhead = listhead->next;
			j++;
		}
}
void on_button_pre_clicked(GtkObject* widget,gpointer user_date)
{
		if(page == 1)
			return ;
		else 
			page--;
		GtkTreeIter iter;
		gtk_list_store_clear(liststore_goods);
		int j = 0;
		char str_restnum[50], str_price[50];
		for(j = 0; j < 27; j++)
		{
			listhead = listhead->pre;
		}
		j = 0;
		while(j < 14 )
		{
			sprintf(str_restnum, "%d", listhead->obj.restnum);
			sprintf(str_price, "%d", listhead->obj.price);
			gtk_list_store_append(liststore_goods, &iter);
			gtk_list_store_set(liststore_goods, &iter, 0, listhead->obj.name, -1);
			gtk_list_store_set(liststore_goods, &iter, 1, listhead->obj.city, -1);
			gtk_list_store_set(liststore_goods, &iter, 2, str_restnum, -1);
			gtk_list_store_set(liststore_goods, &iter, 3, str_price, -1);
			gtk_list_store_set(liststore_goods, &iter, 4, listhead->obj.pinpai, -1);
			gtk_list_store_set(liststore_goods, &iter, 5, listhead->obj.caizhi, -1);
			gtk_list_store_set(liststore_goods, &iter, 6, listhead->obj.shape, -1);
			gtk_list_store_set(liststore_goods, &iter, 7, listhead->obj.color, -1);
			gtk_list_store_set(liststore_goods, &iter, 8, listhead->obj.use, -1);
			listhead = listhead->next;
			j++;
		}
}
void on_button_next_sort_clicked(GtkObject* widget,gpointer user_date)
{
	char str_restnum[20], str_price[20];
	gtk_list_store_clear(liststore_goods);
	int j = 0;
	page1++;
	while(p_sort->next && j < 14)//将排序后的数据输出
	{
		GtkTreeIter iter;
		sprintf(str_restnum, "%d", p_sort->obj.restnum);
		sprintf(str_price, "%d", p_sort->obj.price);
		gtk_list_store_append(liststore_goods, &iter);
		gtk_list_store_set(liststore_goods, &iter, 0, p_sort->obj.name, -1);
		gtk_list_store_set(liststore_goods, &iter, 1, p_sort->obj.city, -1);
		gtk_list_store_set(liststore_goods, &iter, 2, str_restnum, -1);
		gtk_list_store_set(liststore_goods, &iter, 3, str_price, -1);
		gtk_list_store_set(liststore_goods, &iter, 4, p_sort->obj.pinpai, -1);
		gtk_list_store_set(liststore_goods, &iter, 5, p_sort->obj.caizhi, -1);
		gtk_list_store_set(liststore_goods, &iter, 6, p_sort->obj.shape, -1);
		gtk_list_store_set(liststore_goods, &iter, 7, p_sort->obj.color, -1);
		gtk_list_store_set(liststore_goods, &iter, 8, p_sort->obj.use, -1);
		p_sort = p_sort->next;
		j++;
	}
}
void on_button_pre_sort_clicked(GtkObject* widget,gpointer user_date)
{
		if(page1 == 1)
			return ;
		else 
			page1--;
		GtkTreeIter iter;
		gtk_list_store_clear(liststore_goods);
		int j = 0;
		char str_restnum[50], str_price[50];
		for(j = 0; j < 27; j++)
		{
			p_sort = p_sort->pre;
		}
		j = 0;
		while(j < 14 )
		{
			sprintf(str_restnum, "%d", p_sort->obj.restnum);
			sprintf(str_price, "%d", p_sort->obj.price);
			gtk_list_store_append(liststore_goods, &iter);
			gtk_list_store_set(liststore_goods, &iter, 0, p_sort->obj.name, -1);
			gtk_list_store_set(liststore_goods, &iter, 1, p_sort->obj.city, -1);
			gtk_list_store_set(liststore_goods, &iter, 2, str_restnum, -1);
			gtk_list_store_set(liststore_goods, &iter, 3, str_price, -1);
			gtk_list_store_set(liststore_goods, &iter, 4, p_sort->obj.pinpai, -1);
			gtk_list_store_set(liststore_goods, &iter, 5, p_sort->obj.caizhi, -1);
			gtk_list_store_set(liststore_goods, &iter, 6, p_sort->obj.shape, -1);
			gtk_list_store_set(liststore_goods, &iter, 7, p_sort->obj.color, -1);
			gtk_list_store_set(liststore_goods, &iter, 8, p_sort->obj.use, -1);
			p_sort = p_sort->next;
			j++;
		}
}

void on_button_next_search_clicked(GtkObject* widget,gpointer user_date)
{
	char str_restnum[20], str_price[20];
	gtk_list_store_clear(liststore_goods);
	int j = 0;
	page2++;
	while(p_search && j < 14)//将储存在链表中的信息输出到树视图中
	{
		GtkTreeIter iter;
		sprintf(str_restnum, "%d", p_search->obj.restnum);//将库存转化为字符串
		sprintf(str_price, "%d", p_search->obj.price);//将价格转化为字符串
		gtk_list_store_append(liststore_goods, &iter);
		gtk_list_store_set(liststore_goods, &iter, 0, p_search->obj.name, -1);
		gtk_list_store_set(liststore_goods, &iter, 1, p_search->obj.city, -1);
		gtk_list_store_set(liststore_goods, &iter, 2, str_restnum, -1);
		gtk_list_store_set(liststore_goods, &iter, 3, str_price, -1);
		gtk_list_store_set(liststore_goods, &iter, 4, p_search->obj.pinpai, -1);
		gtk_list_store_set(liststore_goods, &iter, 5, p_search->obj.caizhi, -1);
		gtk_list_store_set(liststore_goods, &iter, 6, p_search->obj.shape, -1);
		gtk_list_store_set(liststore_goods, &iter, 7, p_search->obj.color, -1);
		gtk_list_store_set(liststore_goods, &iter, 8, p_search->obj.use, -1);
		p_search = p_search->next;
		j++;
	}
	
}
void on_button_pre_search_clicked(GtkObject* widget,gpointer user_date)
{
		if(page2 == 1)
			return ;
		else 
			page2--;
		GtkTreeIter iter;
		gtk_list_store_clear(liststore_goods);
		int j = 0;
		char str_restnum[50], str_price[50];
		for(j = 0; j < 27; j++)
		{
			p_search = p_search->pre;
		}
		j = 0;
		while(p_search && j < 14)//将储存在链表中的信息输出到树视图中
	{
		GtkTreeIter iter;
		sprintf(str_restnum, "%d", p_search->obj.restnum);//将库存转化为字符串
		sprintf(str_price, "%d", p_search->obj.price);//将价格转化为字符串
		gtk_list_store_append(liststore_goods, &iter);
		gtk_list_store_set(liststore_goods, &iter, 0, p_search->obj.name, -1);
		gtk_list_store_set(liststore_goods, &iter, 1, p_search->obj.city, -1);
		gtk_list_store_set(liststore_goods, &iter, 2, str_restnum, -1);
		gtk_list_store_set(liststore_goods, &iter, 3, str_price, -1);
		gtk_list_store_set(liststore_goods, &iter, 4, p_search->obj.pinpai, -1);
		gtk_list_store_set(liststore_goods, &iter, 5, p_search->obj.caizhi, -1);
		gtk_list_store_set(liststore_goods, &iter, 6, p_search->obj.shape, -1);
		gtk_list_store_set(liststore_goods, &iter, 7, p_search->obj.color, -1);
		gtk_list_store_set(liststore_goods, &iter, 8, p_search->obj.use, -1);
		p_search = p_search->next;
		j++;
	}
}

wuliucont.c/    1516444394  0     0     100766  1975      `
/******************************************
Copyright:SDUT
Author:崔辉
Date:2018-01-18
Describe:物流信息展示界面回调函数声明
Mail:956622792@qq.com
******************************************/
#include <gtk/gtk.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "wuliucont.h"
#include "window_wuliu.h"
#include "miniroat.h"
/******************************************
Function:物流信息展示按钮响应函数
out:无
return:void
******************************************/

void on_button_wuliu_sure_clicked(GtkObject* widget,gpointer user_data)
{
	char *str1, *str2;
	int s, d;
	if(!gtk_combo_box_get_active_text(combobox1_wuliu))
	{
		gtk_widget_show(GTK_WIDGET(window1_wuliu));
		return;			
	}
	if(!gtk_combo_box_get_active_text(combobox2_wuliu))
	{
		gtk_widget_show(GTK_WIDGET(window2_wuliu));
		return;	
	}
	str1 = gtk_combo_box_get_active_text((GtkComboBox *)combobox1_wuliu);//卖家地址
	str2 = gtk_combo_box_get_active_text((GtkComboBox *)combobox2_wuliu);//买家地址
    gtk_widget_show(GTK_WIDGET(window3_wuliu));
	s = wuliu_change1(str1);
	d = wuliu_change1(str2);
	mini_time(s, d);
    mini_cost(s, d);
}
/******************************************
Function:物流信息展示取消按钮响应函数
out:无
return:void
******************************************/
void on_button_wuliu_cancel_clicked(GtkObject* widget,gpointer user_data)
{
	gtk_widget_hide(GTK_WIDGET(window_wuliu));
}
/******************************************
Function:退出错误信息提示按钮响应函数
out:无
return:void
******************************************/
void on_button1_wuliu_close_clicked(GtkObject* widget,gpointer user_data)
{
	gtk_widget_hide(GTK_WIDGET(window1_wuliu));
}
void on_button2_wuliu_close_clicked(GtkObject* widget,gpointer user_data)
{
	gtk_widget_hide(GTK_WIDGET(window2_wuliu));
}
void on_button3_wuliu_close_clicked(GtkObject* widget,gpointer user_data)
{
	gtk_widget_hide(GTK_WIDGET(window3_wuliu));
}


main.c/         1516436595  0     0     100766  609       `
/******************************************
Copyright:SDUT
Author:崔辉
Date:2018-01-18
Describe:主函数，调用显示界面
Mail:956622792@qq.com
******************************************/
#include <stdio.h>
#include <gtk/gtk.h>
#include "mycontrol.h"
#include "myview.h"

int main(int argc,char* argv[])
{
	GtkBuilder *gb;        //建立GtkBuilder对象
	gtk_init(&argc,&argv);
	gb = gtk_load_glade("./view/window_main.glade");    //载入登录界面
	if(gb==NULL) return -1;
	myview_get_widgets(gb);
	cal_widget_init();
	gtk_main();         //循环显示页面，使页面不会消失
	return 0;
}

del.c/          1516428474  0     0     100766  426       `
#include<stdio.h>
#include<stdlib.h>
#include"del.h"
#include"linklist.h"

void delete(link p[], const char *str, int i)
{
	link q1 = p[i]->next, q2 = NULL;
	while(q1)
	{
		if(strcmp(q1->obj.name , str)  == 0)		
		{
			if(q2 == NULL)
			{
				p[i]->next = q1->next;
				free(q1);
				break;
			}
			else
			{
				q2->next = q1->next;
				free(q1);
				break;
			}

		}
		else
		{
			q2 = q1;
			q1 = q1->next;	
		}
		
	}
	
}

hash.c/         1516444931  0     0     100766  4934      `
/******************************************
Copyright:SDUT
Author:崔辉
Date:2018-01-18
Describe:建立哈希表的函数
Mail:956622792@qq.com
******************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <gtk/gtk.h>
#include "linklist.h"
#include "miniroat.h"
#include "hash.h"
/******************************************
Function:头指针数组的初始化
in:无
out:头指针链表
return:void
******************************************/
void inithead()
{
	int i = 0;
	
	for(i = 0; i < 18; i++)
	{
		city_head[i] = (link)malloc(sizeof(struct node));
		caizhi_head[i] = (link)malloc(sizeof(struct node));
		color_head[i] = (link)malloc(sizeof(struct node));
		pinpai_head[i] = (link)malloc(sizeof(struct node));
		city_head[i]->next = NULL;
		color_head[i]->next = NULL;
		caizhi_head[i]->next = NULL;
		pinpai_head[i]->next = NULL;
		city_head[i]->pre = NULL;
		color_head[i]->pre = NULL;
		caizhi_head[i]->pre = NULL;
		pinpai_head[i]->pre = NULL;
		city_tail[i] = city_head[i];
		color_tail[i] = color_head[i];
		caizhi_tail[i] = caizhi_head[i];
		pinpai_tail[i] = pinpai_head[i];
	}
}
/******************************************
Function:将颜色转化为数字
in：颜色的字符串
out:无
return:转化后的数字
******************************************/
int color_change(const gchar *str)
{
	int a;
	if(strcmp(str, "红") == 0)
	{
		a = 0;
	}
	else if(strcmp(str, "橙") == 0)
	{
		a = 1;
	}
	else if(strcmp(str, "黄") == 0)
	{
		a = 2;
	}
	else if(strcmp(str, "绿") == 0)
	{
		a = 3;
	}
	else if(strcmp(str, "青") == 0)
	{
		a = 4;
	}
	else if(strcmp(str, "蓝") == 0)
	{
		a = 5;
	}
	else if(strcmp(str, "紫") == 0)
	{
		a = 6;
	}
	return a;
}
/******************************************
Function:将材质转化为数字
in：材质的字符串
out:无
return:转化后的数字
******************************************/
int caizhi_change(const gchar *str)
{
	int a;
	if(strcmp(str, "牛皮") == 0)
	{
		a = 0;
	}
	else if(strcmp(str, "PU") == 0)
	{
		a = 1;
	}
	else if(strcmp(str, "牛津布") == 0)
	{
		a = 2;
	}
	else if(strcmp(str, "PVC") == 0)
	{
		a = 3;
	}
	else if(strcmp(str, "羊皮") == 0)
	{
		a = 4;
	}
	else if(strcmp(str, "尼龙布") == 0)
	{
		a = 5;
	}
	else if(strcmp(str, "猪皮") == 0)
	{
		a = 6;
	}
	return a;
}
/******************************************
Function:将品牌转化为数字
in：品牌的字符串
out:无
return:转化后的数字
******************************************/
int pinpai_change(const gchar *str)
{
	int a;
	if(strcmp(str, "银座") == 0)
	{
		a = 0;
	}
	else if(strcmp(str, "外交官") == 0)
	{
		a = 1;
	}
	else if(strcmp(str, "皇冠") == 0)
	{
		a = 2;
	}
	else if(strcmp(str, "啄木鸟") == 0)
	{
		a = 3;
	}
	else if(strcmp(str, "七匹狼") == 0)
	{
		a = 4;
	}
	else if(strcmp(str, "威戈") == 0)
	{
		a = 5;
	}
	else if(strcmp(str, "LV") == 0)
	{
		a = 6;
	}
	else if(strcmp(str, "阿玛尼") == 0)
	{
		a = 7;
	}
	else if(strcmp(str, "稻草人") == 0)
	{
		a = 8;
	}
	else if(strcmp(str, "老人头") == 0)
	{
		a = 9;
	}
	return a;
}
/******************************************
Function:依据城市建立哈希
in：读取的存储信息的结构体
out:城市对应链表的头指针数组
return:void
******************************************/
void create_city_list(struct info a)
{
	int x;
	x = wuliu_change1(a.city);
	link p;
	p = NULL;
	p = (link)malloc(sizeof(struct node));
	p->obj = a;
	
	p->next = NULL;
	p->pre = city_tail[x];
	city_tail[x]->next = p;
	city_tail[x] = p;
	//return tail[x];
}
/******************************************
Function:依据颜色建立哈希
in：读取的存储信息的结构体
out:颜色对应链表的头指针数组
return:void
******************************************/
void create_color_list(struct info a)
{
	int x;
	x = color_change(a.color);
	link p;
	p = NULL;
	p = (link)malloc(sizeof(struct node));
	p->obj = a;
	
	p->next = NULL;
	p->pre = color_tail[x];
	color_tail[x]->next = p;
	color_tail[x] = p;
}
/******************************************
Function:依据材质建立哈希
in：读取的存储信息的结构体
out:材质对应链表的头指针数组
return:void
******************************************/
void create_caizhi_list(struct info a)
{
	int x;
	x = caizhi_change(a.caizhi);
	link p;
	p = NULL;
	p = (link)malloc(sizeof(struct node));
	p->obj = a;
	
	p->next = NULL;
	p->pre = caizhi_tail[x];
	caizhi_tail[x]->next = p;
	caizhi_tail[x] = p;
}
/******************************************
Function:依据品牌建立哈希
in：读取的存储信息的结构体
out:品牌对应链表的头指针数组
return:void
******************************************/
void create_pinpai_list(struct info a)
{
	int x;
	x = pinpai_change(a.pinpai);
	link p;
	p = NULL;
	p = (link)malloc(sizeof(struct node));
	p->obj = a;
	
	p->next = NULL;
	p->pre = pinpai_tail[x];
	pinpai_tail[x]->next = p;
	pinpai_tail[x] = p;
}

linklist.c/     1516445179  0     0     100766  1021      `
/******************************************
Copyright:SDUT
Author:崔辉
Date:2018-01-18
Describe:建立链表
Mail:956622792@qq.com
******************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "linklist.h"
/******************************************
Function:链表的初始化函数
in：无
out:头指针
return:void
******************************************/
link initLink()
{
	link head;   //定义一个头指针
	head = (link)malloc(sizeof(struct node));   //为头指针分配空间
	head->next = NULL;
	head->pre = NULL;
	return  head;
}
/******************************************
Function:将每一个新的元素加入到链表
in：  尾指针   记录信息的结构体
out:  无
return:尾指针
******************************************/
link createLink(link tail, struct info a)
{
	link p;   //定义一个结点指针
	p = (link)malloc(sizeof(struct node));
	p->obj = a;
	
	p->next = NULL;
	p->pre = tail;
	tail->next = p;
	tail = p;
	return tail;
}

miniroat.c/     1516256042  0     0     100766  7492      `
#include <string.h>
#include <gtk/gtk.h>
#include "window_wuliu.h"

double map_cost[17][17]={{0, 7, 10, 13, 10, 5, 12, 15, 9999, 7, 12, 9999, 12, 9999, 7, 9999, 9999}, {7,0, 3, 5, 4, 11, 9999, 9999, 9999, 15, 9999, 9999, 9999, 9999, 14, 9999, 9999},{10, 3, 0, 2, 7, 14, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999,9999}, {13, 5, 2, 0, 9, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999}, {10, 4, 7, 9, 0, 15, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999}, {5, 11, 14, 9999, 15, 0, 7, 10, 12, 7, 12, 9999, 12, 9999, 12, 9999, 9999}, {12, 9999, 9999, 9999, 9999, 7, 0, 3, 5, 7, 12, 9999, 12, 9999, 9999, 9999, 9999}, {15, 9999, 9999, 9999, 9999, 10, 3, 0, 2, 10, 14, 9999, 15, 9999, 9999, 9999, 9999}, {9999, 9999, 9999, 9999, 9999, 12, 5, 2, 0, 12, 12, 9999, 9999, 9999, 9999, 9999, 9999}, {7, 15, 9999, 9999, 9999, 7, 7, 10, 12, 0, 5, 9999, 5, 12, 14, 9999, 9999}, {12, 9999, 9999, 9999, 9999, 12, 12, 14, 12, 5, 0, 11, 10, 9999, 9999, 9999, 9999}, {9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 11, 0, 9999, 9999, 9999, 9999, 9999}, {12, 9999, 9999, 9999, 9999, 12, 12, 15, 9999, 5, 10, 9999, 0, 7, 13, 9999, 9999}, {9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 12, 9999, 9999, 7, 0, 11, 19, 21}, {7, 14, 9999, 9999, 9999, 12, 9999, 9999, 9999, 14, 9999, 9999, 13, 11, 0, 9999, 9999}, {9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 19, 9999, 0, 9999}, {9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 21, 9999, 9999, 0}};
double map_time[17][17]={{0, 0.7, 1, 1.3, 1, 0.45, 0.5, 0.5, 9999, 0.5, 1, 9999, 1.1, 9999, 0.5, 9999, 9999}, {0.7, 0, 0.5, 0.5, 0.5, 1.2, 9999, 9999, 9999, 2, 9999, 9999, 9999, 9999, 1.5, 9999, 9999},{1, 0.5, 0, 0.5, 0.5, 2, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999,9999}, {1.3, 0.5, 0.5, 0, 1.5, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999}, {1, 0.5, 0.5, 1.5, 0, 2, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999}, {0.45, 1.2, 2, 9999, 2, 0, 0.5, 1.1, 1.5, 0.5, 1.2, 9999, 1.5, 9999, 2, 9999, 9999}, {0.5, 9999, 9999, 9999, 9999, 0.5, 0, 0.5, 0.5, 1, 1.5, 9999, 1.5, 9999, 9999, 9999, 9999}, {0.5, 9999, 9999, 9999, 9999, 1.1, 0.5, 0, 0.3, 1.2, 1.5, 9999, 2, 9999, 9999, 9999, 9999}, {9999, 9999, 9999, 9999, 9999, 1.5, 0.5, 0.3, 0, 1.5, 1.5, 9999, 9999, 9999, 9999, 9999, 9999}, {0.5, 2, 9999, 9999, 9999, 0.5, 1, 1.2, 1.5, 0, 0.5, 9999, 0.5, 1.5, 2, 9999, 9999}, {1, 9999, 9999, 9999, 9999, 1.2, 1.5, 1.5, 1.5, 0.5, 0, 1.5, 1, 9999, 9999, 9999, 9999}, {9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 1.5, 0, 9999, 9999, 9999, 9999, 9999}, {1.1, 9999, 9999, 9999, 9999, 1.5, 1.5, 2, 9999, 0.5, 1, 9999, 0, 0.5, 2, 9999, 9999}, {9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 1.5, 9999, 9999, 0.5, 0, 2, 2, 3}, {0.5, 1.5, 9999, 9999, 9999, 2, 9999, 9999, 9999, 2, 9999, 9999, 2, 2, 0, 9999, 9999}, {9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 2, 9999, 0, 9999}, {9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 3, 9999, 9999, 0}};

int visit[20], ans[20];//全局变量分别为矩阵图，标记数组，记录权值
double dis[20];
int wuliu_change1(char *str)
{
	int a;
	if(strcmp(str, "北京") == 0)
	{
		a = 0;
	}
	else if(strcmp(str, "沈阳") == 0)
	{
		a = 1;
	}
	else if(strcmp(str, "长春") == 0)
	{
		a = 2;
	}
	else if(strcmp(str, "哈尔滨") == 0)
	{
		a = 3;
	}
	else if(strcmp(str, "大连") == 0)
	{
		a = 4;
	}
	else if(strcmp(str, "济南") == 0)
	{
		a = 5;
	}
	else if(strcmp(str, "南京") == 0)
	{
		a = 6;
	}
	else if(strcmp(str, "上海") == 0)
	{
		a = 7;
	}
	else if(strcmp(str, "杭州") == 0)
	{
		a = 8;
	}
	else if(strcmp(str, "郑州") == 0)
	{
		a = 9;
	}
	else if(strcmp(str, "武汉") == 0)
	{
		a = 10;
	}
	else if(strcmp(str, "广州") == 0)
	{
		a = 11;
	}
	else if(strcmp(str, "西安") == 0)
	{
		a = 12;
	}
	else if(strcmp(str, "兰州") == 0)
	{
		a = 13;
	}
	else if(strcmp(str, "呼和浩特") == 0)
	{
		a = 14;
	}
	else if(strcmp(str, "乌鲁木齐") == 0)
	{
		a = 15;
	}
	else if(strcmp(str, "拉萨") == 0)
	{
		a = 16;
	}
	return a;
}
void wuliu_change2(int s, char a[])
{
	switch(s)
	{
	case 0: strcpy(a,"北京");break;
	case 1: strcpy(a,"沈阳");break;
	case 2: strcpy(a,"长春");break;
	case 3: strcpy(a,"哈尔滨");break;
	case 4: strcpy(a,"大连");break;
	case 5: strcpy(a,"济南");break;
	case 6: strcpy(a,"南京");break;
	case 7: strcpy(a,"上海");break;
	case 8: strcpy(a,"杭州");break;
	case 9: strcpy(a,"郑州");break;
	case 10: strcpy(a,"武汉");break;
	case 11: strcpy(a,"广州");break;
	case 12: strcpy(a,"西安");break;
	case 13: strcpy(a,"兰州");break;
	case 14: strcpy(a,"呼和浩特");break;
	case 15: strcpy(a,"乌鲁木齐");break;
	case 16: strcpy(a,"拉萨");break;
	}
}
void mini_time(int s, int e)
{
    int i, j, k;
   double INF = 9999;
   memset(visit, 0, sizeof(visit));
   for(i = 0;i < 17;i++)//从s开始
   {
       dis[i] = map_time[s][i];
       if(dis[i] == INF)
		{
          ans[i] = -1;
		}
       else
		{
		 ans[i] = s;
		}
   }
   visit[s] = 1;
   for(i = 1;i < 17;i++)
   {
      double mini = INF;
      int u = s;
      for(j = 0;j < 17;j++)
      {
         if(!visit[j] && mini > dis[j])
         {
             u = j;
             mini = dis[j];
         }
      }
      visit[u] = 1;
      if(u == e)
      break;
      for(j = 0;j < 17;j++)
      {
         if(!visit[j] && map_time[u][j] < INF)
         {
             double newdist = dis[u] + map_time[u][j];
             if(newdist < dis[j])
             {
                 dis[j] = newdist;
                 ans[j] = u;
             }
         }
      }
   }
	char temp[50], str[50], str1[200];
	int ans1[20], m = 0;
    sprintf(temp, "%lf", dis[e]);
	gtk_entry_set_text(entry_short_time, temp);
	while(ans[e] != s)
	{
		ans1[m++] = e;
		e = ans[e];
	}
	ans1[m++] = e;
    ans1[m] = s;
    for(i = m; i >= 0; i--)
	{
		wuliu_change2(ans1[i], str);
		if(i == m)
		{
			strcpy(str1, str);
		}
		else
		{
			strcat(str1, "->");
			strcat(str1, str);
		}
	}
	gtk_entry_set_text(entry_short, str1);
}

void mini_cost(int s, int e)
{
   int i, j, k;
   double INF = 9999;
   memset(visit, 0, sizeof(visit));
   for(i = 0;i < 17;i++)//从s开始
   {
       dis[i] = map_cost[s][i];
       if(dis[i] == INF)
		{
          ans[i] = -1;
		}
       else
		{
		 ans[i] = s;
		}
   }
   visit[s] = 1;
   for(i = 1;i < 17;i++)
   {
      double mini = INF;
      int u = s;
      for(j = 0;j < 17;j++)
      {
         if(!visit[j] && mini > dis[j])
         {
             u = j;
             mini = dis[j];
         }
      }
      visit[u] = 1;
      if(u == e)
      break;
      for(j = 0;j < 17;j++)
      {
         if(!visit[j] && map_cost[u][j] < INF)
         {
             double newdist = dis[u] + map_cost[u][j];
             if(newdist < dis[j])
             {
                 dis[j] = newdist;
                 ans[j] = u;
             }
         }
      }
   }
	char temp[50], str[50], str1[200];
	int ans1[20], m = 0;
    sprintf(temp, "%lf", dis[e]);
	gtk_entry_set_text(entry_cheap_cost, temp);
	while(ans[e] != s)
	{
		ans1[m++] = e;
		e = ans[e];
	}
	ans1[m++] = e;
    ans1[m] = s;
    for(i = m; i >= 0; i--)
	{
		wuliu_change2(ans1[i], str);
		if(i == m)
		{
			strcpy(str1, str);
		}
		else
		{
			strcat(str1, "->");
			strcat(str1, str);
		}
	}
	gtk_entry_set_text(entry_cheap, str1);
}

sort.c/         1516353346  0     0     100766  997       `
#include<stdio.h>
#include<stdlib.h>
#include"sort.h"
#include"linklist.h"
void swap(int *a,int *b)
{
    int t=*a;
    *a=*b;
    *b=t;
}
struct node *partion(struct node *pBegin,struct node *pEnd)   //一次划分
{
    if(pBegin==pEnd||pBegin->next==pEnd)    return pBegin;
    int key=pBegin->obj.price;    //选择pBegin作为基准元素
    struct node *p=pBegin,*q=pBegin;
    while(q!=pEnd){   //从pBegin开始向后进行一次遍历
        if(q->obj.price<key){
            p=p->next;
            swap(&p->obj.price,&q->obj.price);
        }
        q=q->next;
    }
    swap(&p->obj.price,&pBegin->obj.price);
    return p;
}
void quick_sort(struct node *pBegin,struct node *pEnd)
{
    if(pBegin==pEnd||pBegin->next==pEnd)    return;
    struct node *mid=partion(pBegin,pEnd);
    quick_sort(pBegin,mid);
    quick_sort(mid->next,pEnd);
}
struct node* sortList(struct node* head) 
{
    if(head==NULL||head->next==NULL)    return head;
    quick_sort(head,NULL);
    return head;
}

